
# Save current directory path of this CMakeLists.txt into CONTRIB_SOURCE_DIR 
# and overwrite CMAKE_*_SOURCE_DIR with the path to the actual source.
set(CONTRIB_CURRENT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
string(REGEX REPLACE "/contrib/cmake" "" CMAKE_CURRENT_SOURCE_DIR
       ${CMAKE_CURRENT_SOURCE_DIR})


file(GLOB FORMS ${CMAKE_CURRENT_SOURCE_DIR}/forms/*.ui)
file(GLOB PROTOBUF_DEFS ${CMAKE_CURRENT_SOURCE_DIR}/*.proto)

set(LIB_HEADERS
    addressbookpage.h
    addresstablemodel.h
    askpassphrasedialog.h
    bitcoinaddressvalidator.h
    bitcoinamountfield.h
    bitcoingui.h
    bitcoinunits.h
    clientmodel.h
    csvmodelwriter.h
    coincontroldialog.h
    coincontroltreewidget.h
    editaddressdialog.h
    guiconstants.h
    guiutil.h
    intro.h
    networkstyle.h
    notificator.h
    openuridialog.h
    optionsdialog.h
    optionsmodel.h
    overviewpage.h
    paymentrequestplus.h
    paymentserver.h
    peertablemodel.h
    qvalidatedlineedit.h
    qvaluecombobox.h
    receivecoinsdialog.h
    receiverequestdialog.h
    recentrequeststablemodel.h
    rpcconsole.h
    sendcoinsdialog.h
    sendcoinsentry.h
    signverifymessagedialog.h
    splashscreen.h
    trafficgraphwidget.h
    transactiondescdialog.h
    transactiondesc.h
    transactionfilterproxy.h
    transactionrecord.h
    transactiontablemodel.h
    transactionview.h
    utilitydialog.h
    walletframe.h
    walletmodel.h
    walletmodeltransaction.h
    walletview.h
    winshutdownmonitor.h
)

set(LIB_SOURCES 
    addressbookpage.cpp
    addresstablemodel.cpp
    askpassphrasedialog.cpp
    bitcoinaddressvalidator.cpp
    bitcoinamountfield.cpp
    bitcoingui.cpp
    bitcoinstrings.cpp
    bitcoinunits.cpp
    clientmodel.cpp
    csvmodelwriter.cpp
    coincontroldialog.cpp
    coincontroltreewidget.cpp
    editaddressdialog.cpp
    guiutil.cpp
    intro.cpp
    networkstyle.cpp
    notificator.cpp
    openuridialog.cpp
    optionsdialog.cpp
    optionsmodel.cpp
    overviewpage.cpp
    paymentrequestplus.cpp
    paymentserver.cpp
    peertablemodel.cpp
    qvalidatedlineedit.cpp
    qvaluecombobox.cpp
    receivecoinsdialog.cpp
    receiverequestdialog.cpp
    recentrequeststablemodel.cpp
    rpcconsole.cpp
    sendcoinsdialog.cpp
    sendcoinsentry.cpp
    signverifymessagedialog.cpp
    splashscreen.cpp
    trafficgraphwidget.cpp
    transactiondesc.cpp
    transactiondescdialog.cpp
    transactionfilterproxy.cpp
    transactionrecord.cpp
    transactiontablemodel.cpp
    transactionview.cpp
    utilitydialog.cpp
    walletframe.cpp
    walletmodel.cpp
    walletmodeltransaction.cpp
    walletview.cpp
    winshutdownmonitor.cpp
)

set(DIR_SOURCES)
foreach(file ${LIB_SOURCES})
    set(DIR_SOURCES ${DIR_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/${file})
endforeach()

set(DIR_HEADERS)
foreach(file ${LIB_HEADERS})
    set(DIR_HEADERS ${DIR_HEADERS} ${CMAKE_CURRENT_SOURCE_DIR}/${file})
endforeach()

include_directories(${CMAKE_CURRENT_SOURCE_DIR}
                    ${CMAKE_CURRENT_SOURCE_DIR}/..
                    ${QT_INCLUDES})

include(${QT_USE_FILE})

# As all intermediate files are generated outside the source tree, the header
# file generated by uic will not be located by the compiler. In order to
# handle this, the build directory needs to be added to the list of include
# directories. 
include_directories(${CMAKE_CURRENT_BINARY_DIR})

add_subdirectory(${CONTRIB_CURRENT_SOURCE_DIR}/locale
                 ${CMAKE_CURRENT_BINARY_DIR}/locale)

# This is a bit annoying but at least it allows out-of-source 
# building.  We copy the qrc and resource files to the build 
# directory to allow rcc to get the relative paths correct.
file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/bitcoin.qrc DESTINATION
          ${CMAKE_CURRENT_BINARY_DIR})
file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/bitcoin_locale.qrc DESTINATION
          ${CMAKE_CURRENT_BINARY_DIR})

file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/res DESTINATION
          ${CMAKE_CURRENT_BINARY_DIR})

# Generate intermediate Qt-specific files from .ui and .h
qt4_wrap_ui(FORMS_HEADERS ${FORMS})
qt4_add_resources(RESOURCES_RCC ${CMAKE_CURRENT_BINARY_DIR}/bitcoin.qrc
                                ${CMAKE_CURRENT_BINARY_DIR}/bitcoin_locale.qrc)

include_directories(${PROTOBUF_INCLUDE_DIRS})
protobuf_generate_cpp(PROTOBUF_SOURCES PROTOBUF_HEADERS ${PROTOBUF_DEFS})

add_library(bitcoinqt ${DIR_HEADERS} ${DIR_SOURCES}
            ${BITCOIN_QM_FILES}
            ${FORMS_HEADERS}
            ${RESOURCES_RCC}
            ${PROTOBUF_SOURCES} ${PROTOBUF_HEADERS}
           )

set_target_properties(bitcoinqt PROPERTIES AUTOMOC TRUE)
 
target_link_libraries(bitcoinqt bitcoin leveldb
                      ${PROTOBUF_LIBRARIES}
                      ${CMAKE_THREAD_LIBS_INIT}
                      ${BDB_LIBRARY}
                      ${Boost_LIBRARIES}
                      ${OPENSSL_LIBRARIES}
                     )

if(USE_QRCODE)
    include_directories(${QRENCODE_INCLUDE_DIR})
    target_link_libraries(bitcoinqt ${QRENCODE_LIBRARY})
endif()

# Cause src/qt/locale to be processed into .qm files
add_dependencies(bitcoinqt bitcoin_translations)

# Link library with qt libs
qt4_use_modules(bitcoinqt Core Gui Network)

if(USE_DBUS)
    qt4_use_modules(bitcoinqt Dbus)
endif()

add_executable(bitcoin-qt ${CMAKE_CURRENT_SOURCE_DIR}/bitcoin.cpp)

# run moc also on bitcoin.cpp:
set_target_properties(bitcoin-qt PROPERTIES AUTOMOC TRUE)

target_link_libraries(bitcoin-qt bitcoinqt)

install(TARGETS bitcoin-qt DESTINATION bin)
