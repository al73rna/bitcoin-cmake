
file(GLOB HEADERS *.h)
file(GLOB SOURCES *.cpp)
file(GLOB QT_RESOURCES *.qrc)
file(GLOB FORMS forms/*.ui)
file(GLOB PROTOBUF_DEFS *.proto)
file(GLOB QT_TRANSLATIONS locale/*.ts)

# remove obj with main() from library:
list(REMOVE_ITEM SOURCES bitcoin.cpp)

include_directories(.)
include_directories(..)
include_directories(${QT_INCLUDES})

include(${QT_USE_FILE})

# Generate intermediate Qt-specific files from .ui and .h
qt4_add_translation(QM_FILES ${QT_TRANSLATIONS})
qt4_wrap_cpp(HEADERS_MOC ${HEADERS})
qt4_wrap_ui(FORMS_HEADERS ${FORMS})
qt4_add_resources(RESOURCES_RCC ${QT_RESOURCES})

# As all intermediate files are generated outside the source tree, the header
# file generated by uic will not be located by the compiler. In order to
# handle this, the build directory needs to be added to the list of include
# directories. 
include_directories(${CMAKE_CURRENT_BINARY_DIR})

include_directories(${PROTOBUF_INCLUDE_DIRS})
protobuf_generate_cpp(PROTOBUF_SOURCES PROTOBUF_HEADERS ${PROTOBUF_DEFS})

add_library(bitcoinqt ${HEADERS} ${SOURCES}
	    ${QM_FILES}
            ${HEADERS_MOC}
	    ${FORMS_HEADERS}
	    ${RESOURCES_RCC}
	    ${PROTOBUF_SOURCES} ${PROTOBUF_HDEADERS})
 
target_link_libraries(bitcoinqt bitcoin leveldb
		      ${PROTOBUF_LIBRARIES}
                      ${CMAKE_THREAD_LIBS_INIT}
		      ${BDB_LIBRARY}
                      ${Boost_LIBRARIES}
		      ${OPENSSL_LIBRARIES}
		      )

# Link library with qt libs
qt4_use_modules(bitcoinqt Core Gui Network)

add_executable(bitcoin-qt bitcoin.cpp)

target_link_libraries(bitcoin-qt bitcoinqt)

# Link library with qt libs TODO: Necessary?
qt4_use_modules(bitcoin-qt Core Gui Network)



